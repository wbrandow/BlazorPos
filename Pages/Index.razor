@page "/"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using BlazorPos.Services
@inject OrderState OrderState


<PageTitle>Blazor POS</PageTitle>

<div class="main">
    <div class="add-product">
        <button type="button" class="btn btn-primary"
            @onclick="@(async () => await AddNewProduct())">
            New Product
        </button>
    </div>

    <ul class="product-cards">
        @if (Products != null) {
            @foreach (var product in Products) {
                <li @onclick="@(async () => await OpenProductDetails(product.Id))" 
                    style="background-color: rgb(149, 149, 255)">
                    <div class="container">
                        <div class="brand">
                            <h2>@product.Brand</h2>
                        </div>
                        <div class="product-description">
                            <strong>@product.Description</strong>
                        </div> 
                        <div class="price">
                            <p>$@product.Price.ToString("0.00")</p>
                        </div>
                    </div> 
                    <div class="select-button">
                        <button type="button" class="btn-primary"
                            @onclick="@(() => OrderState.SelectProduct(product))"
                            @onclick:stopPropagation>
                            Select
                        </button>
                    </div>
                </li>     
            }
        }  
    </ul>
</div>
<div class="cart">
    @if (Order.OrderProducts.Any()) {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var orderProduct in Order.OrderProducts) {
                <div class="cart-item">
                    <div class="remove-button">
                        <a class="oi oi-trash" @onclick="@(() => OrderState.RemoveProduct(orderProduct.ProductId))"></a>    
                    </div>
                    <div class="selectedProduct-description">@orderProduct.Product.Description</div>
                    <div class="selectedProduct-qty">
                        @orderProduct.QtyOnOrder X
                    </div>
                    <div class="selectedProduct-price">
                        $@orderProduct.Product.Price.ToString("0.00")
                    </div>
                    <div class="selectedProduct-line-price">
                        $@orderProduct.GetLinePrice().ToString("0.00")
                    </div>
                </div>
            }
        </div>
    }
    else {
        <div class="empty-cart">Choose a product<br>to get started</div>
    }

    <div class="order-total @(ProductsInOrder.Any() ? "" : "hidden")">
        <strong>Total:</strong>
        <span class="total-price">$@Order.GetTotalPrice().ToString("0.00")</span>
        <div class="order-button">
            <a href="checkout" class="@(ProductsInOrder.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
                Order >
            </a>
        </div>    
    </div>
</div>


@code {
    List<Product> Products = new List<Product>();

    List<Product> ProductsInOrder = new List<Product>();    

    Order Order => OrderState.Order;     

    protected override async Task OnInitializedAsync() {
        Products = await HttpClient.GetFromJsonAsync<List<Product>>(NavigationManager.BaseUri + "api/products");
    }

    protected override void OnAfterRender(bool firstRender) {
        ProductsInOrder = Order.OrderProducts.Select(op => op.Product).ToList();
        StateHasChanged();
    }

    async Task OpenProductDetails(int productId) {
        NavigationManager.NavigateTo($"/products/{productId}");
    }

    async Task AddNewProduct() {
        NavigationManager.NavigateTo($"/products/new"); 
    }
}