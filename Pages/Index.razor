@page "/"
@attribute [Authorize]

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider

@using BlazorPos.Services
@inject OrderState OrderState


<PageTitle>Blazor POS</PageTitle>
<div class="main">
    <div class="product-controls">
        <div class="search-products">
            <div class="input-group">
                <input @bind="searchValue" aria-label="Input search value" />
                <select class="custom-select" id="inputGroupSelect04" @bind="searchField" aria-label="Select field to search">
                    <option selected>Any</option>
                    <option value="Description">Description</option>
                    <option value="Brand">Brand</option>
                    <option value="Vendor">Vendor</option>
                    <option value="UPC">UPC</option>
                    <option value="EAN">EAN</option>
                    <option value="SKU">SKU</option>
                </select>
                <div class="input-group-append">
                    <button class="btn btn-secondary" type="button" aria-label="Search"
                        @onclick="@(() => FilterProducts())">
                        Search
                    </button>
                </div>
            </div>
        </div>    

        <div class="add-product">
            <button type="button" class="btn btn-primary" aria-label="Create new product"
                @onclick="@(() => AddNewProduct())">
                New Product
            </button>
        </div>       
    </div>

    <ul class="product-cards">
        @if (Products != null) {
            <Virtualize Items="@Products" Context="product">
                <li>
                    <a href="/products/@product.Id" aria-label="View product details for @product.Brand - @product.Description">
                        <div class="product-container">
                            <div class="brand">
                                <h2>@product.Brand</h2>
                            </div>
                            <div class="product-description">
                                <strong>@product.Description</strong>
                            </div> 
                            <div class="price">
                                <p>$@product.Price.ToString("0.00")</p>
                            </div>
                            <div class="qtyOnHand">
                                @if(product.InventoryItems == null || product.InventoryItems.Count == 0) {
                                    <p>0</p>
                                }
                                else {
                                    <p>@product.InventoryItems.Sum(item => item.QtyOnHand)</p>
                                }
                            </div>
                        </div> 
                        <div class="select-button">
                            <button type="button" class="btn-primary" aria-label="Add @product.Description to cart"
                                @onclick="@(() => SelectProduct(product))"
                                @onclick:preventDefault @onclick:stopPropagation>
                                Select
                            </button>
                        </div>
                    </a>    
                </li>  
            </Virtualize>       
        }  
    </ul>
</div>
<div class="cart">
    @if (Sale.SaleLines.Any()) {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var saleLine in Sale.SaleLines) {
                <div class="cart-item">
                    <div class="remove-button">
                        <button class="oi oi-trash btn-danger" aria-label="Remove Item" 
                        @onclick="@(() => RemoveProduct(saleLine.ProductId))"></button>    
                    </div>
                    <div class="selectedProduct-description">@saleLine.Product.Description</div>
                    <div class="selectedProduct-qty">
                        <input @bind="@saleLine.Units" />
                    </div>
                    <div class="selectedProduct-price">
                        X $@saleLine.Product.Price.ToString("0.00")
                    </div>
                    <div class="selectedProduct-line-price">
                        $@saleLine.GetLineTotal().ToString("0.00")
                    </div>
                </div>
            }
        </div>
    }
    else {
        <div class="empty-cart">Choose a product<br>to get started</div>
    }

    <div class="order-total @(ProductsInOrder.Any() ? "" : "hidden")">
        <div class="cart-total-price">    
            <strong>Total:</strong>
            <span>$@Sale.GetTotal().ToString("0.00")</span>
        </div>    
        <div class="order-button">
            <a href="checkout" aria-label="Order"
                class="@(ProductsInOrder.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
                Order >
            </a>
        </div>    
    </div>
</div>

@code {
    private string authMessage = "The user is NOT authenticated.";

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    List<Product> Products = new List<Product>();

    List<Product> ProductsInOrder = new List<Product>();    

    Sale Sale => OrderState.Sale;    

    private string? searchValue; 
    private string? searchField;

    protected override async Task OnInitializedAsync() {
        Products = await HttpClient.GetFromJsonAsync<List<Product>>(NavigationManager.BaseUri + "api/products");
        ProductsInOrder = Sale.SaleLines.Select(line => line.Product).ToList();    

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} is authenticated.";
            }
        }

        Console.WriteLine("Completed OnInitializedAsync");    
    }

    private void AddNewProduct() {
        NavigationManager.NavigateTo($"/products/new"); 
    }

   async Task FilterProducts() {
        if (string.IsNullOrWhiteSpace(searchField)) {
            searchField = "Any";
        }

        if (string.IsNullOrWhiteSpace(searchValue)) {
            Products = await HttpClient.GetFromJsonAsync<List<Product>>(NavigationManager.BaseUri + "api/products");
            return;
        }

        Products = await HttpClient.GetFromJsonAsync<List<Product>>(NavigationManager.BaseUri + $"api/products/results?searchField={searchField}&searchValue={searchValue}");
    }

    private void SelectProduct(Product product) {
        OrderState.SelectProduct(product);
        ProductsInOrder = Sale.SaleLines.Select(line => line.Product).ToList();
        StateHasChanged();
    }

    private void RemoveProduct(int productId) {
        OrderState.RemoveProduct(productId);
        ProductsInOrder = Sale.SaleLines.Select(line => line.Product).ToList();
        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e, int productId) {
        if (e.Key == "Enter") {
            // Trigger the removal action when Enter or Space is pressed
            RemoveProduct(productId);
        }
    }
}