@page "/cashregister"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using BlazorPos.Services
@inject OrderState OrderState

@using Blazored.Toast.Services
@inject IToastService toastService

@implements IDisposable

<div class="main">
    <div class="row">
        <div class="col-sm-8">
            <h3>Products</h3>
            <div class="register-search">
                <div class="input-group">
                    <input @bind="searchValue" aria-label="Input search value" />
                    <select class="custom-select" id="inputGroupSelect04" @bind="searchField" aria-label="Select field to search">
                        <option selected>Any</option>
                        <option value="Description">Description</option>
                        <option value="Brand">Brand</option>
                        <option value="Vendor">Vendor</option>
                        <option value="UPC">UPC</option>
                        <option value="EAN">EAN</option>
                        <option value="SKU">SKU</option>
                    </select>
                    <div class="input-group-append">
                        <button class="btn btn-secondary" type="button" tabindex="0" aria-label="Search"
                            @onclick="@(() => FilterProducts())">
                            Search
                        </button>
                    </div>
                </div>
            </div>
            <div class="register-results">
                @if (Products.Count() > 1) {
                    <div>
                        <ProductSearchResults Products=Products 
                        OnSelectProduct="OnSelectProductHandler"
                        OnOpenProductDetails="OnOpenProductDetailsHandler" />
                    </div>
                }

                @if (ProductsInOrder != null && ProductsInOrder.Any()) {
                    <RegisterCart SaleLines=Sale.SaleLines
                        OnRemoveProduct="OnRemoveProductHandler" 
                        OnOpenProductDetails="OnOpenProductDetailsHandler" />
                } 
                else {
                    <p>Search for a product.</p>
                }
            </div>
            <div class="register-product-detail">
                @if (currentSaleLine != null) {
                    <EditForm EditContext=editContext>
                        <RegisterProductDetail SaleLine=currentSaleLine 
                        OnRemoveProduct="OnRemoveProductHandler"
                        OnCloseProductDetail="OnCloseProductDetailHandler" />
                        <DataAnnotationsValidator />
                    </EditForm>    
                }
                else {
                    <p>Click a product to open details.</p>
                }
            </div>
        </div>
        <div class="col-sm-4">
            <div class="register-cart-customer">
                <h3>Customer</h3>
                @if (Customers.Count() == 0) {
                    <!-- This should be moved to shared CustomerSearch.razor file -->
                    <div class="customer-search">
                        <div class="input-group">
                            <input @bind="customerSearchValue" aria-label="Input search value" />
                            <select class="custom-select" id="inputGroupSelect04" @bind="customerSearchField" aria-label="Select field to search">
                                <option selected>Any</option>
                                <option value="Phone">Phone</option>
                                <option value="Email">Email</option>
                                <option value="LastName">Last Name</option>
                                <option value="Company">Company</option>
                            </select>
                            <div class="input-group-append">
                                <button class="btn btn-secondary" type="button" tabindex="0" aria-label="Search"
                                    @onclick="@(() => FindCustomers())">
                                    Search
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div>
                @if (Customers.Count() > 1) {
                    <table class="table table-hover customers-table">
                        <thead>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Phone</th>
                            <th>Company</th>
                            <th></th>
                        </thead>
                        <tbody>
                        @foreach (var customer in Customers) {
                            <tr class="customer-info" role="button" tabindex="0">
                                <td>@customer.FirstName</td>
                                <td>@customer.LastName</td>
                                <td>@customer.Phone</td>
                                <td>@customer.Company</td>
                                <td>
                                    <div class="select-button">
                                        <button type="button" class="btn-primary" aria-label="@($"Add {customer.FirstName} to sale")"
                                            @onclick="@(() => SelectCustomer(customer))"
                                            @onclick:preventDefault @onclick:stopPropagation
                                            @onkeydown:stopPropagation>
                                            Select
                                        </button>
                                    </div>
                                </td> 
                            </tr>   
                        }
                        </tbody>
                    </table>
                }
                else if (Customers.Count() == 1) {
                    <table class="table table-hover customers-table">
                        <thead>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Phone</th>
                            <th>Company</th>
                            <th></th>
                        </thead>
                        <tbody>
                        @foreach (var customer in Customers) {
                            <tr class="customer-info" role="button" tabindex="0">
                                <td>@customer.FirstName</td>
                                <td>@customer.LastName</td>
                                <td>@customer.Phone</td>
                                <td>@customer.Company</td>
                                <td>
                                    <div class="select-button">
                                        <button type="button" class="btn-primary" aria-label="@($"Remove {customer.FirstName} from sale")"
                                            @onclick="@(() => RemoveCustomer())"
                                            @onclick:preventDefault @onclick:stopPropagation
                                            @onkeydown:stopPropagation>
                                            Remove
                                        </button>
                                    </div>
                                </td> 
                            </tr>   
                        }
                        </tbody>
                    </table>
                }
            </div>
            <div class="register-cart-order-totals">
                <RegisterOrderTotals Sale=Sale />
            </div>
            <div class="register-cart-controls">
                <button type="button" class="btn btn-primary payments-button" aria-label="Go to payments" @onclick="@(() => OpenPayments())">
                    Payment
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private string? searchValue; 
    private string? searchField;
    private string? customerSearchValue; 
    private string? customerSearchField;
    private List<Product> Products = new List<Product>();
    private List<Product> ProductsInOrder = new List<Product>();  
    private List<Customer> Customers = new List<Customer>();
    private Sale Sale => OrderState.Sale; 
    private SaleLine currentSaleLine;
    private EditContext editContext;
    bool isError = false; 
    bool orderValid = true;

    protected override void OnInitialized() {
        if (Sale.Customer != null) {
            Customers.Add(Sale.Customer);
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync() {
        ProductsInOrder = Sale.SaleLines.Select(line => line.Product).ToList();           
    }

    async Task FilterProducts() {
        if (string.IsNullOrWhiteSpace(searchField)) {
            searchField = "Any";
        }

        if (string.IsNullOrWhiteSpace(searchValue)) {
            Products = await HttpClient.GetFromJsonAsync<List<Product>>(NavigationManager.BaseUri + "api/products");
        }
        else{
            Products = await HttpClient.GetFromJsonAsync<List<Product>>(NavigationManager.BaseUri + $"api/products/results?searchField={searchField}&searchValue={searchValue}");
        }

        if (Products.Count() == 1) {
            OrderState.SelectProduct(Products.FirstOrDefault());
            ProductsInOrder = Sale.SaleLines.Select(line => line.Product).ToList();
            StateHasChanged();
        }
    }

    async Task FindCustomers() {
        if (string.IsNullOrWhiteSpace(searchField)) {
            customerSearchField = "Any";
        }

        if (string.IsNullOrWhiteSpace(customerSearchValue)) {
            Customers = await HttpClient.GetFromJsonAsync<List<Customer>>(NavigationManager.BaseUri + "api/customers");
        }
        else{
            Customers = await HttpClient.GetFromJsonAsync<List<Customer>>(NavigationManager.BaseUri + $"api/customers/results?searchField={customerSearchField}&searchValue={customerSearchValue}");
        }

        if (Customers.Count() == 1) {
            OrderState.SelectCustomer(Customers.FirstOrDefault());
            StateHasChanged();
        }
    }

    public void OnOpenProductDetailsHandler(SaleLine saleLine) {
        if (currentSaleLine == saleLine) {
            currentSaleLine = null;
        }
        else {
            currentSaleLine = saleLine;

            editContext = new(currentSaleLine);
            editContext.OnFieldChanged += HandleFieldChanged;
        }
        
        StateHasChanged();
    }

    public void OnOpenProductDetailsHandler(Product product) {
        NavigationManager.NavigateTo($"/products/{product.Id}");
    }

    public void OnCloseProductDetailHandler() {
        currentSaleLine = null;

        StateHasChanged();
    }

    public void OnSelectProductHandler(Product product) {
        OrderState.SelectProduct(product);
        ProductsInOrder = Sale.SaleLines.Select(line => line.Product).ToList();
        Products.Clear();
        StateHasChanged();
    }

    public void OnRemoveProductHandler(int productId) {
        OrderState.RemoveProduct(productId);
        ProductsInOrder = Sale.SaleLines.Select(line => line.Product).ToList();
        currentSaleLine = null;
        Console.WriteLine("Called Remove");
        StateHasChanged();
    }

    public void SelectCustomer(Customer customer) {
        OrderState.SelectCustomer(customer);
        Customers.Clear();
        Customers.Add(customer);
        StateHasChanged();
    }

    public void RemoveCustomer() {
        OrderState.RemoveCustomer();
        Customers.Clear();
        StateHasChanged();
    }

    public void OpenPayments() {
        orderValid = true;
        foreach (var line in Sale.SaleLines) {
            if (line.Units > line.Product.InventoryItems.Sum(item => item.QtyOnHand)) {
                toastService.ShowError($"Not enough {line.Product.Description} on hand!");
                orderValid = false;
            }
        }

        if (orderValid) {
            NavigationManager.NavigateTo("/checkout");
        }
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e) {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    public void Dispose() {
        if (editContext != null) {
            editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
}