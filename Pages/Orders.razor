@page "/orders"
@attribute [Authorize]

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider authStateProvider

<div>
    <div class="your-orders">
        <h2>Your Sales</h2>
        <div class="table-responsive">
            <table class="table table-hover orders-table">
                <thead>
                    <th>ID</th>
                    <th>Salesperson</th>
                    <th>Units Sold</th>
                    <th>Subtotal</th>
                    <th>Discount</th>
                    <th>Discounted Subtotal</th>
                    <th>Tax</th>
                    <th>Total Price</th>
                    <th>Customer</th>
                    @if (createdTimeDesc == true) {
                        <th aria-label="Sort by Created Time in ascending order" role="button" tabindex="0" 
                            @onclick="() => CreatedTimeSort()" @onkeydown="e => HandleKeyDown(e)">
                            Created Time <span class="oi oi-chevron-bottom"></span>
                        </th>
                    }
                    else {
                        <th aria-label="Sort by Created Time in descending order" role="button" tabindex="0" 
                            @onclick="() => CreatedTimeSort()" @onkeydown="e => HandleKeyDown(e)">
                            Created Time <span class="oi oi-chevron-top"></span>
                        </th>
                    }
                </thead>
                <tbody>
                @foreach (var sale in sales) {
                    <tr class="order-info" role="button" tabindex="0" aria-label="Click to open sale details"
                        @onclick="() => OpenSaleDetails(sale.Id)" @onkeydown="e => HandleKeyDown(e, sale.Id)">
                        <td>@sale.Id</td>
                        <td>@sale.Salesperson</td>
                        <td>@sale.GetUnitsSold()</td>
                        <td>$@sale.GetSubtotal().ToString("0.00")</td>
                        <td>$@sale.GetTotalDiscount().ToString("0.00")</td>
                        <td>$@sale.GetDiscountedSubtotal().ToString("0.00")</td>
                        <td>$@sale.GetTotalTax().ToString("0.00")</td>
                        <td>$@sale.GetTotal().ToString("0.00")</td>
                        @if (sale.Customer != null) {
                            <td>
                                @sale.Customer.FirstName @sale.Customer.LastName
                            </td>
                        }
                        else {
                            <td>
                                No Customer
                            </td>
                        }
                        <td>@sale.TimeOfSale</td>
                    </tr>   
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    List<Sale> sales = new List<Sale>();
    List<TaxClass> taxClasses = new List<TaxClass>();

    private bool createdTimeDesc = true;    

    protected override async Task OnInitializedAsync() {
        string username = authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;

        sales = await HttpClient.GetFromJsonAsync<List<Sale>>(
            $"{NavigationManager.BaseUri}api/orders/{username}");
        
        taxClasses = await HttpClient.GetFromJsonAsync<List<TaxClass>>(
            $"{NavigationManager.BaseUri}api/settings/taxclasses");

        foreach (var sale in sales) {
            if (sale.CustomerId != null) {
                sale.Customer = await HttpClient.GetFromJsonAsync<Customer>($"{NavigationManager.BaseUri}api/customers/{sale.CustomerId}");
            }
            
            foreach (var line in sale.SaleLines) {
                foreach (var taxClass in taxClasses) {
                    if (line.Product.TaxClassId == taxClass.Id)
                        line.Product.TaxClass = taxClass;
                }
            }
        }    
    }

    private void CreatedTimeSort() {
        createdTimeDesc = !createdTimeDesc;

        if (createdTimeDesc) {
            sales = sales.OrderByDescending(s => s.TimeOfSale).ToList();
        } else {
            sales = sales.OrderBy(s => s.TimeOfSale).ToList();
        }

        StateHasChanged();
    }

    private void OpenSaleDetails(int saleId) {
        NavigationManager.NavigateTo($"/orders/sale/{saleId}");
    }

    private void HandleKeyDown(KeyboardEventArgs e) {
        if (e.Key == "Enter" || e.Key == " ") {
            // Trigger the action when Enter or Space is pressed
            CreatedTimeSort();
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e, int saleId) {
        if (e.Key == "Enter" || e.Key == " ") {
            // Trigger the action when Enter or Space is pressed
            OpenSaleDetails(saleId);
        }
    }    
}

