@page "/orders"
@attribute [Authorize]

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider authStateProvider

<div>
    <div class="your-orders">
        <h2>Your Orders</h2>
        <div class="table-responsive">
            <table class="table table-hover orders-table">
                <thead>
                    <th>Order ID</th>
                    <th>Products Purchased</th>
                    <th>Subtotal</th>
                    <th>Discount</th>
                    <th>Discounted Subtotal</th>
                    <th>Tax</th>
                    <th>Total Price</th>
                    @if (createdTimeDesc == true) {
                        <th aria-label="Sort by Created Time in ascending order" role="button" tabindex="0" 
                            @onclick="() => CreatedTimeSort()" @onkeydown="e => HandleKeyDown(e)">
                            Created Time <span class="oi oi-chevron-bottom"></span>
                        </th>
                    }
                    else {
                        <th aria-label="Sort by Created Time in descending order" role="button" tabindex="0" 
                            @onclick="() => CreatedTimeSort()" @onkeydown="e => HandleKeyDown(e)">
                            Created Time <span class="oi oi-chevron-top"></span>
                        </th>
                    }
                </thead>
                <tbody>
                @foreach (var order in orders) {
                    <tr class="order-info">
                        <td>@order.OrderId</td>
                        <td>@order.OrderProducts.Sum(op => op.QtyOnOrder)</td>
                        <td>$@order.GetTotalPriceBeforeDiscount().ToString("0.00")</td>
                        <td>$@order.GetTotalDiscount().ToString("0.00")</td>
                        <td>$@order.GetTotalPrice().ToString("0.00")</td>
                        <td>$@order.GetTotalTax().ToString("0.00")</td>
                        <td>$@order.GetTotalPriceWithTax().ToString("0.00")</td>
                        <td>@order.CreatedTime</td>
                    </tr>    
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    List<Order> orders = new List<Order>();
    List<TaxClass> taxClasses = new List<TaxClass>();

    private bool createdTimeDesc = true;    

    protected override async Task OnInitializedAsync() {
        string username = authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;

        orders = await HttpClient.GetFromJsonAsync<List<Order>>(
            $"{NavigationManager.BaseUri}api/orders/{username}");
        
        taxClasses = await HttpClient.GetFromJsonAsync<List<TaxClass>>(
            $"{NavigationManager.BaseUri}api/settings/taxclasses");

        foreach (var order in orders) {
            foreach (var orderProduct in order.OrderProducts) {
                foreach (var taxClass in taxClasses) {
                    if (orderProduct.Product.TaxClassId == taxClass.Id)
                        orderProduct.Product.TaxClass = taxClass;
                }
            }
        }    
    }

    private void CreatedTimeSort() {
        createdTimeDesc = !createdTimeDesc;

        if (createdTimeDesc) {
            orders = orders.OrderByDescending(o => o.CreatedTime).ToList();
        } else {
            orders = orders.OrderBy(o => o.CreatedTime).ToList();
        }

        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e) {
        if (e.Key == "Enter") {
            // Trigger the action when Enter or Space is pressed
            CreatedTimeSort();
        }
    }
}

