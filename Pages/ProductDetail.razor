@page "/products/{ProductId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@implements IDisposable


<div class="main">
    @if (invalidProduct) {
        <h2>Product not found</h2>
        <p>This product does not seem to exist.</p>
    }
    else if (product == null) {
        <h2>
            <text>Loading...</text>
        </h2>
    }
    else {
        <EditForm EditContext=editContext OnValidSubmit=UpdateProduct>
            <ProductEditor Product=product />

            <div class="edit-product-buttons">
                <button class="update-button btn btn-primary" type="Submit" disabled=@isError>
                    Update
                </button>
                <button type="button" class="delete-button btn btn-danger" @onclick="@(async () => await DeleteProduct())">
                    Delete
                </button>
            </div>
            <DataAnnotationsValidator />
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    Product product;
    bool invalidProduct = false;

    private EditContext editContext;
    bool isError = false;

    protected override async Task OnParametersSetAsync() {
        try {
            product = await HttpClient.GetFromJsonAsync<Product>(
                $"{NavigationManager.BaseUri}product/{ProductId}");
        }
        catch (Exception ex) {
            invalidProduct = true;
            Console.Error.WriteLine(ex);
        }

        editContext = new(product);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e) {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    public void Dispose() {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    async Task UpdateProduct() {
        try{
            var response = await HttpClient.PutAsJsonAsync(
                $"{NavigationManager.BaseUri}product/{ProductId}", product);

            NavigationManager.NavigateTo("/");    
        }
        catch (Exception ex) {
            Console.Error.WriteLine(ex);
        }
    }

    async Task DeleteProduct() {
        try {
            var response = await HttpClient.DeleteAsync(
                $"{NavigationManager.BaseUri}product/{ProductId}");

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex) {
            Console.Error.WriteLine(ex);
        }
    }

}