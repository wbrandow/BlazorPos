@page "/products/{ProductId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@implements IDisposable

@inject AuthenticationStateProvider authStateProvider


<div class="main">
    <div class="row">
        <div class="col-sm-4">
            @if (invalidProduct) {
                <h2>Product not found</h2>
                <p>This product does not seem to exist.</p>
            }
            else if (product == null) {
                <h2>
                    <text>Loading...</text>
                </h2>
            }
            else {
                <EditForm EditContext=editContext OnValidSubmit=UpdateProduct>
                    <ProductEditor Product=product />

                    <div class="form-field">
                        <label>Add Quantity:</label>
                        <div>
                            <InputNumber @bind-Value="QtyToAdd" />
                        </div>
                    </div>

                    <div class="edit-product-buttons">
                        <button class="update-button btn btn-primary" type="Submit" disabled=@isError>
                            Update
                        </button>
                        <button type="button" class="delete-button btn btn-danger" @onclick="@(async () => await DeleteProduct())">
                            Delete
                        </button>
                    </div>
                    <DataAnnotationsValidator />
                </EditForm>
            }
        </div>
        <div class="col-sm-8">
            <div>
                @if (product == null) {
                    <p>Loading...</p>
                }
                else {
                    <h3>Inventory Lines</h3>
                    <table class="table table-hover" aria-label="Inventory Data">
                        <thead>
                            <th scope="col">Qty</th>
                            <th scope="col">Entered Inventory</th>
                            <th scope="col">Entered By</th>
                            <th scope="col">PO Number</th>
                        </thead>
                        @foreach (var item in product.InventoryItems) {
                            <tbody>
                                <tr>
                                    <td>@item.QtyOnHand</td>
                                    <td>@item.AquisitionDate</td>
                                    <td>@item.AddedBy</td>
                                    @if (item.PurchaseOrderId == null) {
                                        <td></td>
                                    }
                                    else {
                                        <td>@item.PurchaseOrderId</td>
                                    }
                                </tr>
                            </tbody>
                        }
                    </table>
                    <h5>Total On Hand: @product.GetQuantityOnHand()</h5>
                }
            </div>
            <div>
                <h3>Sale Lines</h3>
                <table class="table table-hover" aria-label="Sales Data">
                    <thead>
                        <th scope="col">Sale Id</th>
                        <th scope="col">Time Sold</th>
                        <th scope="col">Salesperson</th>
                        <th scope="col">Units Sold</th>
                    </thead>
                    <tbody>
                        @if (SaleLines == null || SaleLines.Count() == 0) {
                            <tr>
                                <td colspan="4">No sale lines.</td>
                            </tr>
                        }
                        else {
                            @foreach (var line in SaleLines) {
                                <tr role="button" tabindex="0" aria-label="@($"Open Details for Sale with Id {line.SaleId}")"
                                    @onclick="() => OpenSaleDetails(line.SaleId)" @onkeydown="(e) => HandleKeyDown(e, line.SaleId)">
                                    <td>@line.SaleId</td>
                                    <td>@line.Sale.TimeOfSale</td>
                                    <td>@line.Sale.Salesperson</td>
                                    <td>@line.Units</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <h5>Total Sold: @SaleLines.Sum(line => line.Units)</h5>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    public int QtyToAdd;
    public InventoryItem InventoryItem;

    Product product;
    bool invalidProduct = false;

    public List<SaleLine> SaleLines = new List<SaleLine>();

    private EditContext editContext;
    bool isError = false;

    protected override async Task OnParametersSetAsync() {
        try {
            product = await HttpClient.GetFromJsonAsync<Product>(
                $"{NavigationManager.BaseUri}api/products/{ProductId}");

            var sales = await HttpClient.GetFromJsonAsync<List<Sale>>(
                $"{NavigationManager.BaseUri}api/orders/sales-by-product?productId={ProductId}");    

            foreach (var sale in sales) {
                foreach (var line in sale.SaleLines) {
                    if (line.ProductId == ProductId) {
                        line.Sale = sale;
                        line.SaleId = sale.Id;
                        SaleLines.Add(line);
                    }
                }
            }

            editContext = new(product);
            editContext.OnFieldChanged += HandleFieldChanged;    
        }
        catch (Exception ex) {
            invalidProduct = true;
            Console.Error.WriteLine(ex);
        }
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e) {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    public void Dispose() {
        if (editContext != null) {
            editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }

    private void OpenSaleDetails(int saleId) {
         NavigationManager.NavigateTo($"/orders/sale/{saleId}");
    }

    private void HandleKeyDown(KeyboardEventArgs e, int saleId) {
        if (e.Key == "Enter" || e.Key == " ") {
            // Trigger the action when Enter or Space is pressed
            OpenSaleDetails(saleId);
        }
    } 

    async Task UpdateProduct() {
        string username = authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;

        if (QtyToAdd > 0) {
            InventoryItem = new InventoryItem() {
                ProductId = product.Id,
                QtyOnHand = QtyToAdd,
                UnitCost = product.DefaultCost,
                AquisitionDate = DateTime.Now,
                AddedBy = username
            };

            product.InventoryItems.Add(InventoryItem);
        }

        try {
            var response = await HttpClient.PutAsJsonAsync(
                $"{NavigationManager.BaseUri}api/products/{ProductId}", product);


            NavigationManager.NavigateTo("/");    
        }
        catch (Exception ex) {
            Console.Error.WriteLine(ex);
        }
    }

    async Task DeleteProduct() {
        try {
            var response = await HttpClient.DeleteAsync(
                $"{NavigationManager.BaseUri}api/products/{ProductId}");

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex) {
            Console.Error.WriteLine(ex);
        }
    }
}
