<!--
@page "/products/new"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@implements IDisposable

@inject AuthenticationStateProvider authStateProvider

<EditForm EditContext=editContext OnValidSubmit=CreateProduct>
    <ProductEditor Product=product />

    <div class="form-field">
        <label>Add Quantity:</label>
        <div>
            <InputNumber @bind-Value="QtyToAdd" />
        </div>
    </div>

    <button class="checkout-button btn btn-warning" type="Submit" disabled=@isError>
        Create Product
    </button>
    <DataAnnotationsValidator />
</EditForm>

@code {
    Product product = new Product();
    
    public int QtyToAdd;
    public InventoryItem InventoryItem;

    private EditContext editContext;
    bool isError = false;

    protected override void OnInitialized() {
        editContext = new(product);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e) {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    public void Dispose() {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    async Task CreateProduct() {
        string username = authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;

        if (QtyToAdd > 0) {
            InventoryItem = new InventoryItem() {
                ProductId = product.Id,
                Product = product,
                QtyOnHand = QtyToAdd,
                UnitCost = product.DefaultCost,
                AquisitionDate = DateTime.Now,
                AddedBy = username
            };

            product.InventoryItems.Add(InventoryItem);
        }

        try {
            var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "api/products", product);
            var newProductId = await response.Content.ReadFromJsonAsync<int>();
            NavigationManager.NavigateTo("/"); 
        }
        catch (Exception ex) {
            Console.Error.WriteLine(ex);
        }
    }
}
-->