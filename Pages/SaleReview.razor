@page "/orders/sale/{saleId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using Blazored.Toast.Services
@inject IToastService toastService

@using BlazorPos.Services
@inject OrderState OrderState

<div class="main">
    @if (invalidSale) {
        <h2>Product not found</h2>
        <p>This product does not seem to exist.</p>
    }
    else if (Sale == null) {
        <h2>
            <text>Loading...</text>
        </h2>
    }
    else {
        <div>
            <label>
                <h1>Sale Review</h1>
            </label>
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Salesperson</th>
                        <th>Units Sold</th>
                        <th>Subtotal</th>
                        <th>Discount</th>
                        <th>Discounted Subtotal</th>
                        <th>Tax</th>
                        <th>Total Price</th>
                        <th>Profit</th>
                        <th>Customer</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@Sale.Id</td>
                        <td>@Sale.Salesperson</td>
                        <td>@Sale.GetUnitsSold()</td>
                        <td>$@Sale.GetSubtotal().ToString("0.00")</td>
                        <td>$@Sale.GetTotalDiscount().ToString("0.00")</td>
                        <td>$@Sale.GetDiscountedSubtotal().ToString("0.00")</td>
                        <td>$@Sale.GetTotalTax().ToString("0.00")</td>
                        <td>$@Sale.GetTotal().ToString("0.00")</td>
                        <td>$@Sale.GetProfit().ToString("0.00")</td>
                        @if (Sale.Customer != null) {
                            <td>
                                <p>@Sale.Customer.FirstName @Sale.Customer.LastName</p>
                                <button type="button" class="oi oi-x btn-danger" aria-label="Remove Customer"
                                    @onclick="@(() => RemoveCustomer())"
                                    @onclick:preventDefault @onclick:stopPropagation
                                    @onkeydown:stopPropagation>
                                </button>
                            </td>
                        }
                        else {
                            <td>
                                <p>No Customer</p>
                                <button type="button" class="oi oi-plus btn-danger" aria-label="Add Customer"
                                    @onclick="@(() => OpenCustomerSearch())"
                                    @onclick:preventDefault @onclick:stopPropagation
                                    @onkeydown:stopPropagation>
                                </button>
                            </td>
                        }
                        <td>@Sale.TimeOfSale</td>
                        <td>
                            <button type="button" class="btn-primary" aria-label="Return Product"
                                @onclick="@(() => OpenReturn(Sale))">
                                Return
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        @if (isCustomerSearchOpen) {
            <div class="modal-backdrop">
                <div class="modal">
                    <h3>Select a Customer</h3>
                    <CustomerSearch OnCustomerSelected="OnCustomerSelected" />
                    <button @onclick="CloseCustomerSearch">Cancel</button>
                </div>
            </div>
        }

        <div>
            <label>
                <h3>Sale Lines</h3>
            </label>
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Brand</th>
                        <th>Units Sold</th>
                        <th>Price/Unit</th>
                        <th>Total Price</th>
                        <th>Avg Cost/Unit</th>
                        <th>Total Cost</th>
                        <th>Avg Profit/Unit</th>
                        <th>Total Profit</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var line in Sale.SaleLines) {
                        <tr>
                            <td>@line.Product.Description</td>
                            <td>@line.Product.Brand</td>
                            <td>@line.Units</td>
                            <td>$@line.GetDiscountedUnitPrice().ToString("0.00")</td>
                            <td>$@line.GetLineTotal().ToString("0.00")</td>
                            <td>$@line.UnitCost.ToString("0.00")</td>
                            <td>$@line.GetLineCost().ToString("0.00")</td>
                            <td>$@line.GetAvgUnitProfit().ToString("0.00")</td>
                            <td>$@line.GetLineProfit().ToString("0.00")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter]
    public int SaleId { get; set; }

    public Sale Sale;
    public bool invalidSale = false;

    private bool isCustomerSearchOpen = false;

    protected override async Task OnParametersSetAsync() {
        try {
            Sale = await HttpClient.GetFromJsonAsync<Sale>(
                $"{NavigationManager.BaseUri}api/orders/sale/{SaleId}");

            if (Sale.CustomerId != null) {
                Sale.Customer = await HttpClient.GetFromJsonAsync<Customer>($"{NavigationManager.BaseUri}api/customers/{Sale.CustomerId}");
            }
        }
        catch (Exception ex) {
            invalidSale = true;
            Console.Error.WriteLine(ex);
        }
    }

    protected async Task RemoveCustomer() {
        var customerResponse = await HttpClient.PutAsJsonAsync($"{NavigationManager.BaseUri}api/customers/removeSale", Sale);

        if (customerResponse.IsSuccessStatusCode) {
            // Set Sale.Customer to null or update it appropriately
            Sale.Customer = null;
            Sale.CustomerId = null;

            // Trigger re-rendering
            StateHasChanged();
        }
    }

    protected async Task OpenCustomerSearch() {
        isCustomerSearchOpen = true;

        StateHasChanged();
    }

    protected void CloseCustomerSearch() {
        isCustomerSearchOpen = false;
    }

    // Called when a customer is selected
    protected async Task OnCustomerSelected(Customer selectedCustomer) {
        // Assign the selected customer to the sale
        Sale.Customer = selectedCustomer;
        Sale.CustomerId = selectedCustomer.Id;

        // Optionally, save the sale with the new customer
        var customerResponse = await HttpClient.PutAsJsonAsync($"{NavigationManager.BaseUri}api/customers/addSale", Sale);

        if (customerResponse.IsSuccessStatusCode) {
            // Close the modal and refresh the UI
            CloseCustomerSearch();
            StateHasChanged();
        }
    }

    public void OpenReturn(Sale returnSale) {
        OrderState.ReturnSale(returnSale);

        NavigationManager.NavigateTo("/cashregister");
    }
}