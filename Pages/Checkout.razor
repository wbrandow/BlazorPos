@page "/checkout"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

@using BlazorPos.Controllers

@using BlazorPos.Services
@inject OrderState OrderState

@inject AuthenticationStateProvider authStateProvider

<div class="main">
    <h3>Order Review</h3>
    @foreach (var orderProduct in Order.OrderProducts) {
        <div class="checkout-item row">
            <div class="checkout-product-description col-sm-8">
                <strong>
                    @orderProduct.Product.Brand
                    @orderProduct.Product.Description
                </strong>
            </div>
            <div class="checkout-product-price col-sm-3">
                <div class="d-flex justify-content-between align-items-center">
                    <span>@orderProduct.QtyOnOrder X</span>
                    <span>$@orderProduct.Product.Price.ToString("0.00")</span>
                </div>
            </div>
            <div class="checkout-line-price col-sm-1">
                <strong>
                    $@orderProduct.GetLinePrice().ToString("0.00")
                </strong>
            </div>
        </div>
    }   

    <div class="checkout-total-price">
        <p>
            <strong>
                Total price:
                $@Order.GetTotalPrice().ToString("0.00")
            </strong>
        </p>
    </div>

    <div class="checkout-buttons row">
        <div class="checkout-back-button col-sm-6">
            <button type="button" class="btn btn-warning" @onclick="@(() => Back())">
                @("< Back")
            </button>
        </div>
        <div class="checkout-confirm-button col-sm-6">
            <button type="button" class="btn btn-primary" @onclick="@(async () => await PlaceOrder())">
                Confirm Order
            </button>
        </div>
    </div>
</div>

@code {
    Order Order => OrderState.Order;

    List<Product> Products = new List<Product>();
        
    protected override void OnInitialized() {
        Products = Order.OrderProducts.Select(op => op.Product).ToList();
    } 

    private void Back() {
        NavigationManager.NavigateTo("/");
    }

    async Task PlaceOrder() {
        Console.WriteLine("#In Checkout.razor#PlaceOrder():  Order Id = " + Order.OrderId);
        string username = authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;
        Order.CreatedBy = username;
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "api/orders", Order);
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"/orders");    
    }
}



