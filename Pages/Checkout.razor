@page "/checkout"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

@using BlazorPos.Controllers

@using BlazorPos.Services
@inject OrderState OrderState

@inject AuthenticationStateProvider authStateProvider

<div class="main">
    <h3>Order Review</h3>
    @foreach (var line in Sale.SaleLines) {
        <div class="checkout-item row">
            <div class="checkout-product-description col-sm-8">
                <strong>
                    @line.Product.Brand
                    @line.Product.Description
                </strong>
            </div>
            <div class="checkout-product-price col-sm-3">
                <div class="d-flex justify-content-between align-items-center">
                    <span>@line.Units X</span>
                    <span>$@line.UnitSalePrice.ToString("0.00")</span>
                </div>
            </div>
            <div class="checkout-line-price col-sm-1">
                <strong>
                    $@line.GetLineSubtotal().ToString("0.00")
                </strong>
            </div>
        </div>
    }   

    <div class="checkout-total-price">
        <div>Units: @Sale.SaleLines.Sum(line => line.Units)</div>
        <div>Subtotal: $@Sale.GetSubtotal().ToString("0.00")</div>
        @if (Sale.GetTotalDiscount() > 0) {
            <div>Discount: <span style="color:red;">$@Sale.GetTotalDiscount().ToString("0.00")</span></div>
            <div>Discounted Subtotal: $@Sale.GetDiscountedSubtotal().ToString("0.00")</div>           
        }
        <div>Tax: $@Sale.GetTotalTax().ToString("0.00")</div>
        <div>
            <strong>
                Total price:
                $@Sale.GetTotal().ToString("0.00")
            </strong>
        </div>
    </div>

    <div class="checkout-buttons row">
        <div class="checkout-back-button col-sm-6">
            <button type="button" class="btn btn-warning" @onclick="@(() => Back())">
                @("< Back")
            </button>
        </div>
        <div class="checkout-confirm-button col-sm-6">
            <button type="button" class="btn btn-primary" @onclick="@(async () => await PlaceOrder())">
                Confirm Order
            </button>
        </div>
    </div>
</div>

@code {
    Sale Sale => OrderState.Sale;

    List<Product> Products = new List<Product>();
        
    protected override void OnInitialized() {
        Products = Sale.SaleLines.Select(line => line.Product).ToList();
    } 

    private void Back() {
        NavigationManager.NavigateTo("/cashregister");
    }

    async Task PlaceOrder() {
        Console.WriteLine("#In Checkout.razor#PlaceOrder():  Sale Id = " + Sale.Id);
        string username = authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;
        Sale.Salesperson = username;
        
        foreach (var line in Sale.SaleLines){
            int qty = line.Units;
            decimal lineCost = 0;
            if (qty >= 0) {
                while (qty > 0) {
                    for (int i = 0; i < line.Product.InventoryItems.Count(); i++) {
                        
                        if (qty >= line.Product.InventoryItems[i].QtyOnHand) {
                            qty -= line.Product.InventoryItems[i].QtyOnHand;
                            
                            lineCost += (line.Product.InventoryItems[i].UnitCost * line.Product.InventoryItems[i].QtyOnHand);
                            line.Product.InventoryItems.Remove(line.Product.InventoryItems[i]);
                        }
                        else if (qty < line.Product.InventoryItems[i].QtyOnHand) {
                            line.Product.InventoryItems[i].QtyOnHand -= qty;

                            lineCost += (qty * line.Product.InventoryItems[i].UnitCost);
                            qty = 0;
                        }
                        if (qty == 0) {
                            break;
                        }
                    }
                }
                line.UnitCost = lineCost / line.Units;
            }
            // trying to figure out how to return an item
            else {
                InventoryItem returnedItem = new InventoryItem();

                returnedItem.ProductId = line.ProductId;
                returnedItem.QtyOnHand = Math.Abs(qty);
                returnedItem.AquisitionDate = DateTime.UtcNow;
                returnedItem.AddedBy = username;
                
                if (line.UnitCost > 0.00m) {
                    returnedItem.UnitCost = line.UnitCost;
                }
                else {
                    returnedItem.UnitCost = line.Product.DefaultCost;
                }

                line.Product.InventoryItems.Add(returnedItem);
                
                qty = 0;
            }
        }

        Sale.Completed = true;

        try {
            var saleResponse = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "api/orders", Sale);
            if (!saleResponse.IsSuccessStatusCode) {
                throw new Exception($"Failed to save sale. StatusCode: {saleResponse.StatusCode}");
            }

         //   var customerResponse = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}api/customers/{Sale.CustomerId}", Sale);
         //   if (!customerResponse.IsSuccessStatusCode) {
         //       throw new Exception($"Failed to save customer. StatusCode: {customerResponse.StatusCode}");
         //   }
        }
        catch (Exception ex) {
            Console.Error.WriteLine($"Error placing order: {ex.Message}");

            Sale.Completed = false;

            return;
        }

        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"/orders");    
    }
}
