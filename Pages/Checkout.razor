@page "/checkout"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

@using BlazorPos.Controllers

@using BlazorPos.Services
@inject OrderState OrderState

@inject AuthenticationStateProvider authStateProvider

<div class="main">
    <h3>Order Review</h3>
    @foreach (var line in Sale.SaleLines) {
        <div class="checkout-item row">
            <div class="checkout-product-description col-sm-8">
                <strong>
                    @line.Product.Brand
                    @line.Product.Description
                </strong>
            </div>
            <div class="checkout-product-price col-sm-3">
                <div class="d-flex justify-content-between align-items-center">
                    <span>@line.Units X</span>
                    <span>$@line.UnitSalePrice.ToString("0.00")</span>
                </div>
            </div>
            <div class="checkout-line-price col-sm-1">
                <strong>
                    $@line.GetLineSubtotal().ToString("0.00")
                </strong>
            </div>
        </div>
    }   

    <div class="checkout-total-price">
        <div>Units: @Sale.SaleLines.Sum(line => line.Units)</div>
        <div>Subtotal: $@Sale.GetSubtotal().ToString("0.00")</div>
        @if (Sale.GetTotalDiscount() > 0) {
            <div>Discount: <span style="color:red;">$@Sale.GetTotalDiscount().ToString("0.00")</span></div>
            <div>Discounted Subtotal: $@Sale.GetDiscountedSubtotal().ToString("0.00")</div>           
        }
        <div>Tax: $@Sale.GetTotalTax().ToString("0.00")</div>
        <div>
            <strong>
                Total price:
                $@Sale.GetTotal().ToString("0.00")
            </strong>
        </div>
    </div>

    <div class="checkout-buttons row">
        <div class="checkout-back-button col-sm-6">
            <button type="button" class="btn btn-warning" @onclick="@(() => Back())">
                @("< Back")
            </button>
        </div>
        <div class="checkout-confirm-button col-sm-6">
            <button type="button" class="btn btn-primary" @onclick="@(async () => await PlaceOrder())">
                Confirm Order
            </button>
        </div>
    </div>
</div>

@code {
    Sale Sale => OrderState.Sale;

    List<Product> Products = new List<Product>();
        
    protected override void OnInitialized() {
        Products = Sale.SaleLines.Select(line => line.Product).ToList();
    } 

    private void Back() {
        NavigationManager.NavigateTo("/cashregister");
    }

    async Task PlaceOrder() {
        // FIXME: Remove InventoryItems
        Console.WriteLine("#In Checkout.razor#PlaceOrder():  Sale Id = " + Sale.Id);
        string username = authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;
        Sale.Salesperson = username;
        
        foreach (var line in Sale.SaleLines){
            int qty = line.Units;
            while (qty > 0) {
                for (int i = 0; i < line.Product.InventoryItems.Count(); i++) {
                    Console.WriteLine("QUANTITY ON HAND BEFORE: " + line.Product.InventoryItems[i].QtyOnHand);
                    if (qty >= line.Product.InventoryItems[i].QtyOnHand) {
                        qty -= line.Product.InventoryItems[i].QtyOnHand;
                        
                        line.Product.InventoryItems.Remove(line.Product.InventoryItems[i]);
                    }
                    else if (qty < line.Product.InventoryItems[i].QtyOnHand) {
                        line.Product.InventoryItems[i].QtyOnHand -= qty;
                        qty = 0;
                    }
                    if (qty == 0) {
                        break;
                    }
                }
            }
        }

        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "api/orders", Sale);

        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"/orders");    
    }
}
